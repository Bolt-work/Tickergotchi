@page "/Login"
@using GotchiWeb.Authentication;
@inject UserAccountService userAccountService
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

@using Gotchi
@using Gotchi.Persons.DTOs
@inject GotchiHostService _gotchiHostService

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Login v2</h3>
        </div>
        <div class="mb-3">
            <label> User Name</label>
            <input @bind="model.Username" class="form-control" placeholder="User Name" />
        </div>
        <div class="mb-3">
            <label> Password</label>
            <input @bind="model.Password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="Authenticate" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@code {
    private class Model
    {
        public string? Username { get; set; }
        public string? Password { get; set; }
    }

    private Model model = new Model();

    private async Task Authenticate()
    {
        if (false == await _gotchiHostService.DataAccess().CheckPasswordAndUserNameAsync(model.Password, model.Username))
        {
            await js.InvokeVoidAsync("alert", "Invalid User Name or Password");
            return;
        }

        var person = await _gotchiHostService.DataAccess().PersonByUserNameAsync(model.Username);
        if (person is null)
            return;

        var gotchiAuthenticationStateProvider = (GotchiAuthenticationStateProvider)authStateProvider;
        await gotchiAuthenticationStateProvider.UpdateAuthenticationState(new UserSession
            {
                SerialNumber = person.Id,
                UserName = person.UserName,
                Role = person.Role
            });

        navManager.NavigateTo("/", true);
    }
}
