@page "/Register"
@using GotchiWeb.Authentication;
@inject IJSRuntime js
@inject AuthenticationStateProvider authStateProvider
@inject NavigationManager navManager

@using Gotchi
@using Gotchi.Persons.CommandServices
@using Gotchi.Persons.DTOs
@inject GotchiHostService _gotchiHostService

<div class="row">
    <div class="col-lg-4 offset-lg-4 pt-4 pb-4 border">
        <div class="mb-3 text-center">
            <h3>Register</h3>
        </div>
        @if (_showErrorUserNameMessage)
        {
            <div class="mb-3">
                <label class="col font-weight-bold text-danger">User with that name already exists </label>
            </div>
        }
        <div class="mb-3">
            <label> User Name</label>
            <input @bind="model.Username" class="form-control" placeholder="User Name" />
        </div>
        @if (_showErrorPasswordsDontMatch)
        {
            <div class="mb-3">
                <label class="col font-weight-bold text-danger">Passwords don't match'</label>
            </div>
        }
        <div class="mb-3">
            <label> Password</label>
            <input @bind="model.Password" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3">
            <label> Re-enter password</label>
            <input @bind="model.PasswordSecond" class="form-control" placeholder="Password" />
        </div>
        <div class="mb-3 d-grid gap-2">
            <button @onclick="RegisterUser" class="btn btn-primary">Login</button>
        </div>
    </div>
</div>

@if (_showErrorCantFindAuthentication)
{
    <br />
    <h3>Error could not find authentication</h3>
}

@code {
    private class Model
    {
        public string? Username { get; set; }
        public string? Password { get; set; }
        public string? PasswordSecond { get; set; }
    }

    private Model model = new Model();
    private bool _showErrorUserNameMessage = false;
    private bool _showErrorPasswordsDontMatch = false;
    private bool _showErrorCantFindAuthentication = false;

    private async Task RegisterUser()
    {
        _showErrorUserNameMessage = false;
        _showErrorPasswordsDontMatch = false;
        _showErrorCantFindAuthentication = false;

        if (string.IsNullOrWhiteSpace(model.Username))
        {
            _showErrorUserNameMessage = true;
            return;
        }

        if (string.IsNullOrWhiteSpace(model.Password) || string.IsNullOrWhiteSpace(model.PasswordSecond))
        {
            _showErrorPasswordsDontMatch = true;
            return;
        }

        if (model.Password != model.PasswordSecond)
        {
            _showErrorPasswordsDontMatch = true;
            return;
        }

        var userNameAlreadyExists = await _gotchiHostService.DataAccess().UserNameAlreadyExistAsync(model.Username);
        if (userNameAlreadyExists)
        {
            _showErrorUserNameMessage = true;
            return;
        }

        var command = new CreatePersonCommand(model.Username, model.Password);
        _gotchiHostService.CommandService().Process(command);
        var auth = await _gotchiHostService.DataAccess().AuthenticationByPasswordAndUserName(model.Password, model.Username);

        if (auth is null)
        {
            _showErrorCantFindAuthentication = true;
            return;
        }

        var gotchiAuthenticationStateProvider = (GotchiAuthenticationStateProvider)authStateProvider;
        await gotchiAuthenticationStateProvider.UpdateAuthenticationState(new UserSession
            {
                SerialNumber = auth.PersonId,
                UserName = auth.UserName,
                Role = auth.Role
            });

        navManager.NavigateTo("/", true);
    }

}
