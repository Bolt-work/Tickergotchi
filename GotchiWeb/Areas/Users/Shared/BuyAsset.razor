@using Gotchi
@using Gotchi.CryptoCoins.DTOs

@inject GotchiHostService _gotchiHostService
<h4>Buy Asset</h4>

@if (string.IsNullOrWhiteSpace(PortfolioId))
{
    <p> No PortfolioId id ...</p>
}
else if (!_showFindCoins)
{
    <button class="btn btn-primary" @onclick="ToggleShowFindCoins">Find Crypto coins</button>
}
else
{
    <div class="container border p-3 ">
        <h3>Find Crypto Coin</h3>
        <hr>

        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link @(activeTab == 1 ? "active" : "")" @onclick="() => ChangeTab(1)">CoinMarketId</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @(activeTab == 2 ? "active" : "")" @onclick="() => ChangeTab(2)">Name</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @(activeTab == 3 ? "active" : "")" @onclick="() => ChangeTab(3)">Slug</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @(activeTab == 4 ? "active" : "")" @onclick="() => ChangeTab(4)">Symbol</a>
            </li>
        </ul>

        <div class="tab-content">
            <br />
            <div class="tab-pane col-12 row @(activeTab == 1 ? "active" : "")">
                <label class="col-2 font-weight-bold">Coin Market Id:</label>
                <input type="text" @bind="_findCoinModel.CoinMarketId" placeholder="Enter the coins Coin Market Id" />
            </div>
            <div class="tab-pane col-12 row @(activeTab == 2 ? "active" : "")">
                <label class="col-2 font-weight-bold">Name:</label>
                <input type="text" @bind="_findCoinModel.CoinName" placeholder="Enter the coins Name" />
            </div>
            <div class="tab-pane col-12 row @(activeTab == 3 ? "active" : "")">
                <label class="col-2 font-weight-bold">Slug:</label>
                <input type="text" @bind="_findCoinModel.CoinSlug" placeholder="Enter the coins Slug" />
            </div>
            <div class="tab-pane col-12 row @(activeTab == 4 ? "active" : "")">
                <label class="col-2 font-weight-bold">Symbol:</label>
                <input type="text" @bind="_findCoinModel.CoinSymbol" placeholder="Enter the coins Symbol" />
            </div>
            <br />
            <div class="row">
                <div class="col">
                    <button type="submit" class="btn btn-primary" @onclick="GetCoinDetails">Submit</button>
                    <button class="btn btn-primary" @onclick="ToggleShowFindCoins">Close</button>
                </div>
            </div>
        </div>

        <br />
        @if (!_firstRun)
        {
            <h4>Results</h4>
            <hr />

            @if (!_displayResultsList.Any())
            {
                <label class="col-2 font-weight-bold">*No Crypto coins found.</label>
            }
            else
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>CoinMarketId</th>
                            <th>Name</th>
                            <th>Slug</th>
                            <th>Symbol</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var coin in _displayResultsList)
                        {
                            <tr>
                                <td>@coin.Id</td>
                                <td>@coin.Name</td>
                                <td>@coin.Slug</td>
                                <td>@coin.Symbol</td>
                                <td>@coin.Price</td>
                                <button class="btn btn-primary active" @onclick="() => ShowBuyCoinMenu(PortfolioId, coin.Id)">Buy</button>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }

        @if (_showBuyMenu)
        {
            <h3>Buy Coin</h3> 
            <hr />
            <label class="col-2 font-weight-bold">Amount $: </label>
            <input type="text" @bind="_buyCoinModel.Amount" placeholder="Enter amount" />
            <button class="btn btn-primary active" @onclick="() => BuyCoin(_buyCoinModel.PortfolioId, _buyCoinModel.CoinMarketId, _buyCoinModel.Amount)">Buy</button>
        }

    </div>

}


@code {

    [Parameter]
    public string? PortfolioId { get; set; }

    private CryptoCoinDTO? _resultCoinSingle = null;
    private ICollection<CryptoCoinDTO> _resultCoinList = new List<CryptoCoinDTO>();
    private ICollection<CryptoCoinDTO> _displayResultsList = new List<CryptoCoinDTO>();
    private FindCoinModel _findCoinModel = new();
    private BuyCoinModel _buyCoinModel = new();

    private bool _showFindCoins = false;
    private int activeTab = 1;
    private bool _firstRun = true;

    private bool _showBuyMenu = false;


    private void ToggleShowFindCoins()
    {
        if (_showFindCoins == false)
        {
            _showFindCoins = true;
            _firstRun = true;
        }
        else
        {
            _showFindCoins = false;
            _firstRun = false;
            CloseBuyCoinMenu();
        }
    }

    private void ChangeTab(int tab)
    {
        activeTab = tab;
        _findCoinModel = new();
    }

    #region Find Coin
    private async void GetCoinDetails()
    {
        _resultCoinSingle = null;
        _resultCoinList = new List<CryptoCoinDTO>();
        _displayResultsList = new List<CryptoCoinDTO>();

        if (!string.IsNullOrWhiteSpace(_findCoinModel.CoinMarketId))
        {
            _resultCoinSingle = await _gotchiHostService.DataAccess().CryptoCoinByCoinMarketIdAsync(_findCoinModel.CoinMarketId!);
            UpdateResults();
        }
        else if (!string.IsNullOrWhiteSpace(_findCoinModel.CoinName))
        {
            _resultCoinSingle = await _gotchiHostService.DataAccess().CryptoCoinByNameAsync(_findCoinModel.CoinName!);
            UpdateResults();
        }
        else if (!string.IsNullOrWhiteSpace(_findCoinModel.CoinSlug))
        {
            _resultCoinList = await _gotchiHostService.DataAccess().CryptoCoinBySlugAsync(_findCoinModel.CoinSlug!);
            UpdateResults();
        }
        else if (!string.IsNullOrWhiteSpace(_findCoinModel.CoinSymbol))
        {
            _resultCoinList = await _gotchiHostService.DataAccess().CryptoCoinBySymbolAsync(_findCoinModel.CoinSymbol!);
            UpdateResults();
        }
    }

    private void UpdateResults()
    {
        if (_resultCoinSingle != null)
        {
            _displayResultsList.Add(_resultCoinSingle);
        }
        else if (_resultCoinList.Any())
        {
            _displayResultsList = _resultCoinList;
        }

        _firstRun = false;

        StateHasChanged();
    }

    private class FindCoinModel
    {
        public string? CoinMarketId { get; set; } = null;
        public string? CoinName { get; set; } = null;
        public string? CoinSlug { get; set; } = null;
        public string? CoinSymbol { get; set; } = null;
    }

    #endregion

    #region Buy Menu
    private void ShowBuyCoinMenu(string? portfolioId, string? coinId)
    {
        if (string.IsNullOrWhiteSpace(coinId))
            return;

        _buyCoinModel = new();
        _buyCoinModel.PortfolioId = portfolioId;
        _buyCoinModel.CoinMarketId = coinId;
        _showBuyMenu = true;
    }

    private void CloseBuyCoinMenu()
    {
        _buyCoinModel = new();
        _showBuyMenu = false;
    }

    private void BuyCoin(string? portfolioId, string? coinId, float amount)
    {
        var t = 0;
    }


    private class BuyCoinModel
    {
        public string? PortfolioId { get; set; } = null;
        public string? CoinMarketId { get; set; } = null;
        public float Amount { get; set; }
    }
    #endregion
}
