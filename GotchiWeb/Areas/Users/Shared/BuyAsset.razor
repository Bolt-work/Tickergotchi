@using Gotchi
@using Gotchi.CryptoCoins.DTOs
@using Gotchi.Portfolios.CommandService
@using Gotchi.Portfolios.DTOs
@using System.ComponentModel.DataAnnotations

@inject NavigationManager navManager
@inject GotchiHostService _gotchiHostService

<h4>Buy Asset</h4>

@if (Portfolio is null)
{
    <p> No PortfolioId ...</p>
}
else if (!_showFindCoins)
{
    <button class="btn btn-primary" @onclick="ToggleShowFindCoins">Find Crypto coins</button>
}
else
{
    <div class="container border p-3 ">
        <h3>Find Crypto Coin</h3>
        <hr>

        <ul class="nav nav-tabs">
            <li class="nav-item">
                <a class="nav-link @(activeTab == 1 ? "active" : "")" @onclick="() => ChangeTab(1)">Name</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @(activeTab == 2 ? "active" : "")" @onclick="() => ChangeTab(2)">Slug</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @(activeTab == 3 ? "active" : "")" @onclick="() => ChangeTab(3)">Symbol</a>
            </li>
            <li class="nav-item">
                <a class="nav-link @(activeTab == 4 ? "active" : "")" @onclick="() => ChangeTab(4)">CoinMarketId</a>
            </li>
        </ul>

        <div class="tab-content">
            <br />
            <div class="tab-pane col-12 row @(activeTab == 1 ? "active" : "")">
                <label class="col-2 font-weight-bold">Name:</label>
                <input type="text" @bind="_findCoinModel.InputText" @oninput="GetNameSuggestions" placeholder="Enter the coins Name" />

                <table class="table ">
                    <tbody>
                        @foreach (var suggestion in _findCoinModel.Suggestions)
                        {
                            <tr>
                                <td>@suggestion</td>
                                <td><button type="submit" class="btn btn-primary" @onclick="()=>GetCoinDetailsByName(suggestion)">Submit</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="tab-pane col-12 row @(activeTab == 2 ? "active" : "")">
                <label class="col-2 font-weight-bold">Slug:</label>
                <input type="text" @bind="_findCoinModel.InputText" @oninput="GetSlugSuggestions" placeholder="Enter the coins Slug" />

                <table class="table ">
                    <tbody>
                        @foreach (var suggestion in _findCoinModel.Suggestions)
                        {
                            <tr>
                                <td>@suggestion</td>
                                <td><button type="submit" class="btn btn-primary" @onclick="()=>GetCoinDetailsBySlug(suggestion)">Submit</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="tab-pane col-12 row @(activeTab == 3 ? "active" : "")">
                <label class="col-2 font-weight-bold">Symbol:</label>
                <input type="text" @bind="_findCoinModel.InputText" @oninput="GetSymbolSuggestions" placeholder="Enter the coins Symbol" />

                <table class="table ">
                    <tbody>
                        @foreach (var suggestion in _findCoinModel.Suggestions)
                        {
                            <tr>
                                <td>@suggestion</td>
                                <td><button type="submit" class="btn btn-primary" @onclick="()=>GetCoinDetailsBySymbol(suggestion)">Submit</button></td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
            <div class="tab-pane col-12 row @(activeTab == 4 ? "active" : "")">
                <label class="col-2 font-weight-bold">Coin Market Id:</label>
                <input type="text" @bind="_findCoinModel.InputText" placeholder="Enter the coins Coin Market Id" />
                
                <div class="row">
                    <div class="col">
                        <br>
                        <button type="submit" class="btn btn-primary" @onclick="()=>GetCoinDetailsByCoinMarketId(_findCoinModel.InputText)">Submit</button>
                    </div>
                </div>
            </div>
            <br />
            <div class="row">
                <div class="col">
                    <button class="btn btn-primary" @onclick="ToggleShowFindCoins">Close</button>
                </div>
            </div>
        </div>

        <br />
        @if (!_firstRun)
        {
            <h4>Results</h4>
            <hr />

            @if (!_resultsModel.DisplayResultsList.Any())
            {
                <label class="col-2 font-weight-bold">*No Crypto coins found.</label>
            }
            else
            {
                <table class="table table-striped">
                    <thead>
                        <tr>
                            <th>CoinMarketId</th>
                            <th>Name</th>
                            <th>Slug</th>
                            <th>Symbol</th>
                            <th>Price</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var coin in _resultsModel.DisplayResultsList)
                        {
                            <tr>
                                <td>@coin.Id</td>
                                <td>@coin.Name</td>
                                <td>@coin.Slug</td>
                                <td>@coin.Symbol</td>
                                <td>$@coin.Price</td>
                                <button class="btn btn-primary active" @onclick="() => ShowBuyCoinMenu(Portfolio, coin.Id)">Buy</button>
                            </tr>
                        }
                    </tbody>
                </table>
            }
        }

        @if (_showBuyMenu)
        {
            <h3>Buy Coin</h3> 
            <hr />
            <div class="row">
                @if (!string.IsNullOrWhiteSpace(_BuyMenuErrorMessage))
                {
                    <label class="col font-weight-bold text-danger">@_BuyMenuErrorMessage</label>
                }
            </div>
            <div class="row">
                <div class="col">
                    <label class="col-2 font-weight-bold">Amount $: </label>
                    <input type="text" @bind="_buyCoinModel.Amount" placeholder="Enter amount" />
                    <button class="btn btn-success active" @onclick="SetToMax">Max</button>
                    <button class="btn btn-primary active" @onclick="() => BuyCoin(_buyCoinModel.Portfolio, _buyCoinModel.CoinMarketId, _buyCoinModel.Amount)">Buy</button>
                </div>
            </div>
        }

    </div>

}


@code {
    [Parameter]
    public PortfolioDTO? Portfolio { get; set; }

    [Parameter]
    public string? ReloadAddress { get; set; } = "/Portfolio/";

    private FindCoinModel _findCoinModel = new();
    private ResultsModel _resultsModel = new();
    private BuyCoinModel _buyCoinModel = new();

    private bool _showFindCoins = false;
    private int activeTab = 1;
    private bool _firstRun = true;

    private bool _showBuyMenu = false;
    private string? _BuyMenuErrorMessage = null;


    private void ToggleShowFindCoins()
    {
        if (_showFindCoins == false)
        {
            _showFindCoins = true;
            _firstRun = true;
        }
        else
        {
            _showFindCoins = false;
            _firstRun = false;
            CloseBuyCoinMenu();
        }
    }

    private void ChangeTab(int tab)
    {
        activeTab = tab;
        _findCoinModel = new();
    }

    #region Find Coin

    private async void GetCoinDetailsByName(string? name)
    {
        if (string.IsNullOrWhiteSpace(name))
            return;

        _resultsModel = new();
        _resultsModel.ResultCoinSingle = await _gotchiHostService.DataAccess().CryptoCoinByNameAsync(name);
        _findCoinModel = new();
        UpdateResults();
    }

    private async void GetCoinDetailsBySlug(string? slug)
    {
        if (string.IsNullOrWhiteSpace(slug))
            return;

        _resultsModel = new();
        _resultsModel.ResultCoinList = await _gotchiHostService.DataAccess().CryptoCoinBySlugAsync(slug);
        _findCoinModel = new();
        UpdateResults();
    }

    private async void GetCoinDetailsBySymbol(string? symbol)
    {
        if (string.IsNullOrWhiteSpace(symbol))
            return;

        _resultsModel = new();
        _resultsModel.ResultCoinList = await _gotchiHostService.DataAccess().CryptoCoinBySymbolAsync(symbol);
        _findCoinModel = new();
        UpdateResults();
    }

    private async void GetCoinDetailsByCoinMarketId(string? coinMarketId)
    {
        if (string.IsNullOrWhiteSpace(coinMarketId))
            return;

        _resultsModel = new();
        _resultsModel.ResultCoinSingle = await _gotchiHostService.DataAccess().CryptoCoinByCoinMarketIdAsync(coinMarketId);
        _findCoinModel = new();
        UpdateResults();
    }

    private void UpdateResults()
    {
        _firstRun = false;
        StateHasChanged();
    }


    private void GetNameSuggestions(ChangeEventArgs e)
    {
        GetSuggestions(e, _gotchiHostService.DataAccess().GetNameSuggestionsAsync);
    }

    private void GetSlugSuggestions(ChangeEventArgs e)
    {
        GetSuggestions(e,_gotchiHostService.DataAccess().GetSlugSuggestionsAsync);
    }

    private void GetSymbolSuggestions(ChangeEventArgs e)
    {
        GetSuggestions(e, _gotchiHostService.DataAccess().GetSymbolSuggestionsAsync);
    }

    private async void GetSuggestions(ChangeEventArgs e, Func<string, int, Task<IEnumerable<string?>>> suggestionFunction)
    {
        if (e.Value is null)
            return;

        var input = e.Value.ToString();
        if (string.IsNullOrWhiteSpace(input))
        {
            _findCoinModel.Suggestions = new List<string?>();
            return;
        }

        _findCoinModel.Suggestions = await suggestionFunction(input, 8);
    }

    private class FindCoinModel
    {
        public string? InputText { get; set; } = null;
        public IEnumerable<string?> Suggestions = new List<string?>();
    }

    private class ResultsModel
    {
        public CryptoCoinDTO? ResultCoinSingle = null;
        public ICollection<CryptoCoinDTO> ResultCoinList = new List<CryptoCoinDTO>();
        private ICollection<CryptoCoinDTO> _displayResultsList = new List<CryptoCoinDTO>();

        public ICollection<CryptoCoinDTO> DisplayResultsList
        {
            get 
            { 
                var _displayResultsList = new List<CryptoCoinDTO>();
                if (ResultCoinSingle != null)
                {
                    _displayResultsList.Add(ResultCoinSingle);
                }
                else if (ResultCoinList.Any())
                {
                    _displayResultsList = ResultCoinList.ToList();
                }
                return _displayResultsList;
            }
            private set { _displayResultsList = value; }
        }
        
    }

    #endregion

    #region Buy Menu
    private void ShowBuyCoinMenu(PortfolioDTO portfolio, string? coinId)
    {
        if (string.IsNullOrWhiteSpace(coinId))
            return;

        _buyCoinModel = new();
        _buyCoinModel.Portfolio = portfolio;
        _buyCoinModel.CoinMarketId = coinId;
        _showBuyMenu = true;
    }

    private void SetToMax()
    {
        if (_buyCoinModel.Portfolio is null)
            return;

        _buyCoinModel.Amount = _buyCoinModel.Portfolio.Balance;
    }

    private void CloseBuyCoinMenu()
    {
        _buyCoinModel = new();
        _showBuyMenu = false;
        _BuyMenuErrorMessage = null;
    }

    private void BuyCoin(PortfolioDTO? portfolio, string? coinId, float amount)
    {
        if (portfolio is null)
            return;

        if (string.IsNullOrWhiteSpace(ReloadAddress))
            return;

        if (string.IsNullOrWhiteSpace(portfolio.Id))
            return;

        if (string.IsNullOrWhiteSpace(coinId))
            return;

        if (amount <= 0)
        {
            _BuyMenuErrorMessage = "Amount must be greater than Zero";
            return;
        }

        if (amount > portfolio.Balance)
        {
            _BuyMenuErrorMessage = "Cant afford amount";
            return;
        }

        var command = new BuyAssetsCommand(portfolio.Id, coinId, amount);
        _gotchiHostService.CommandService().Process(command);
        navManager.NavigateTo(ReloadAddress, true);
    }


    private class BuyCoinModel
    {
        public PortfolioDTO? Portfolio { get; set; } = null;
        public string? CoinMarketId { get; set; } = null;
        public float Amount { get; set; }
    }
    #endregion
}
