@using Blazor.Extensions.Canvas.Canvas2D;
@using Blazor.Extensions;
@using Gotchi
@using Gotchi.Gotchis.DTOs
@using static Gotchi.Gotchis.DTOs.GotchiDTO

@using Blazor.Extensions.Canvas


<h3>GotchiDisplay</h3>

@if (Gotchi is null)
{
    <h2>Gotchi not loaded</h2>
}
else
{
    <table class="table table-striped">
        <tbody>
            <tr>
                <td><strong>@Gotchi.Name   Lvl</strong> @Gotchi.Level</td>
            </tr>
        </tbody>
    </table>
    <br />
    <hr />

    @if (Gotchi.State == GotchiStateDTO.Dead)
    {
        <td><h2> Is Dead </h2></td>
    }
    else if (Gotchi.State == GotchiStateDTO.Alive)
    {
        <br />
        <h2> Is Alive</h2>
        <hr />

        <table class="table table-striped">
            <tbody>
                <tr>
                    <td><strong>Number of Stars: </strong> @Gotchi.NumberOfHearts(_numberStars)</td>
                    <td><strong>Exp of death: </strong> @Gotchi.EstimatedTimeOfDeath()?.ToString("dd':'hh':'mm':'ss")</td>
                    <td><strong>Exp time till death: </strong> @Gotchi.EstimatedTimeTillDeath()?.ToString("dd':'hh':'mm':'ss")</td>
                </tr>
            </tbody>
        </table>
        <br />
    }
}
<img @ref="_spriteSheet" hidden id="spriteSheet" src="Assets/spritesheet.png" />

<BECanvas Width="300" Height="400" @ref="_canvasReference"></BECanvas>


@code {

    [Parameter]
    public GotchiDTO? Gotchi { get; set; }

    private readonly int _numberStars = 12;

    private Canvas2DContext _context;

    protected BECanvasComponent _canvasReference;
    protected ElementReference _spriteSheet;

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        this._context = await this._canvasReference.CreateCanvas2DAsync();
        await this._context.SetFillStyleAsync("green");

        await this._context.FillRectAsync(10, 100, 100, 100);

        await this._context.SetFontAsync("48px serif");
        await this._context.StrokeTextAsync("Hello Blazor!!!", 10, 100);
    }
}
