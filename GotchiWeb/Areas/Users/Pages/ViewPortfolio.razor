@page "/ViewPortfolio/{portfolioId}"

@using Gotchi
@using Gotchi.Portfolios.CommandService;
@using Gotchi.Portfolios.DTOs
@using System.ComponentModel.DataAnnotations;
@using System.Security.Claims;

@using GotchiWeb.Areas.Users.Shared;

@inject IJSRuntime js
@inject GotchiHostService _gotchiHostService

<h3>Portfolio</h3>

<h4>Buy Asset</h4>
<EditForm Model="@buyAssetModel" OnValidSubmit="@BuyAsset">
    <DataAnnotationsValidator />
    
    @*<ValidationSummary />*@
    <div class="col-12 row">
        <label class="col-2 font-weight-bold">CoinMarket Id:</label>
        <InputText id="coinId" @bind-Value="buyAssetModel.CoinMarketId" />
        &nbsp;<ValidationMessage For="@(() => buyAssetModel.CoinMarketId)" />
    </div>

    <div class="col-12 row">
        <label class="col-2 font-weight-bold">Value:</label>
        <InputNumber id="Amount" @bind-Value="buyAssetModel.AmountInValue" />
        &nbsp;<ValidationMessage For="@(() => buyAssetModel.CoinMarketId)" />
    </div>


    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

<h4>Sell Asset</h4>
<EditForm Model="@sellAssetModel" OnValidSubmit="@SellAsset">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="col-12 row">
        <label class="col-2 font-weight-bold">CoinMarket Id:</label>
        <InputText id="coinId" @bind-Value="sellAssetModel.CoinMarketId" />
        &nbsp;<ValidationMessage For="@(() => sellAssetModel.CoinMarketId)" />
    </div>

    <div class="col-12 row">
        <label class="col-2 font-weight-bold">Units:</label>
        <InputNumber id="Amount" @bind-Value="sellAssetModel.Units" />
        &nbsp;<ValidationMessage For="@(() => sellAssetModel.Units)" />
    </div>

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@if (_portfolio is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>Account Holder Id</th>
                <th>Balance</th>
                <th>Assets Count</th>
                <th>BalanceLastUpdated</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@_portfolio.Id</td>
                <td>@_portfolio.AccountHolder.Id</td>
                <td>@_portfolio.Balance</td>
                <td>@_portfolio.Assets.Count</td>
                <td>@_portfolio.BalanceLastUpdated</td>
            </tr>
        </tbody>
    </table>
}

<h4>Assets</h4>


@if (_loadState == LoadState.NotLoaded)
{
    <p><em>Loading...</em></p>
}
else if(_loadState == LoadState.NotFound)
{
    <GetStarted UserId="@_userId"></GetStarted>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>CoinMarketId</th>
                <th>Name</th>
                <th>Slug</th>
                <th>Symbol</th>

                <th>PriceWhenLastBought</th>
                <th>Profit</th>
                <th>Units</th>
                <th>CurrentPrice</th>
                <th>CoinMarketLastUpdated</th>
                <th>CoinLastUpdated</th>
                <th>IsValid</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var asset in _portfolio.Assets)
            {
                <tr>
                    <td>@asset.Id</td>
                    <td>@asset.CoinMarketId</td>
                    <td>@asset.Name</td>
                    <td>@asset.Slug</td>
                    <td>@asset.Symbol</td>

                    <td>@asset.PriceWhenLastBought</td>
                    <td>@asset.Profit</td>
                    <td>@asset.Units</td>
                    <td>@asset.CurrentPrice</td>
                    <td>@asset.CoinMarketLastUpdated</td>
                    <td>@asset.CoinLastUpdated</td>
                    <td>@asset.IsValid</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {

    [Parameter]
    public string? portfolioId { get; set; }

    private LoadState _loadState = LoadState.NotFound;
    private string? _userId;
    private PortfolioDTO _portfolio = null!;

    private BuyAssetUiModel buyAssetModel = new();
    private SellAssetUiModel sellAssetModel = new();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState =  await authenticationState;
        _userId = authState.User.Claims.First(x => x.Type == ClaimTypes.SerialNumber).Value;
        _portfolio = _gotchiHostService.DataAccess().PortfoliosByPersonId(_userId).FirstOrDefault();

        if (_portfolio is null)
        {
            _loadState = LoadState.NotFound;
        } 
        else
        {
            _loadState = LoadState.FoundPortfolio;    
        }
    }

    private async Task BuyAsset()
    {
        var command = new BuyAssetsCommand(_portfolio.Id, buyAssetModel.CoinMarketId, buyAssetModel.AmountInValue);
        _gotchiHostService.CommandService().Process(command);

        buyAssetModel = new BuyAssetUiModel();
        _portfolio = _gotchiHostService.DataAccess().PortfolioById(portfolioId);
    }

    private async Task SellAsset()
    {
        var command = new SellAssetsCommand(_portfolio.Id, sellAssetModel.CoinMarketId, sellAssetModel.Units);
        _gotchiHostService.CommandService().Process(command);

        sellAssetModel = new SellAssetUiModel();
        _portfolio = _gotchiHostService.DataAccess().PortfolioById(portfolioId);
    }


    private enum LoadState
    {
        NotLoaded,
        NotFound,
        FoundPortfolio
    }

    private class BuyAssetUiModel
    {
        [Required(ErrorMessage = "CoinMarket Id required")]
        public string? CoinMarketId { get; set; }

        [Required(ErrorMessage = "CoinMarket Id required")]
        [Range(1, int.MaxValue, ErrorMessage = "Value should be greater than or equal to 1")]
        public float AmountInValue { get; set; }
    }

    private class SellAssetUiModel
    {
        [Required(ErrorMessage = "CoinMarket Id is required")]
        public string? CoinMarketId { get; set; }

        [Required(ErrorMessage = "Number of units is required")]
        public float Units { get; set; }
    }
}
