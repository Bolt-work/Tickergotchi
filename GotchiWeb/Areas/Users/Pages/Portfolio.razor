@page "/Portfolio/"

@using Gotchi
@using Gotchi.Portfolios.CommandService
@using Gotchi.Portfolios.DTOs
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims

@using GotchiWeb.Areas.Users.Shared
@using GotchiWeb.Areas.Users.Pages.Portfolios

@inject IJSRuntime js
@inject GotchiHostService _gotchiHostService

<h3>Portfolio</h3>

@if (_loadState == LoadState.NotLoaded)
{
    <p><em>Loading...</em></p>
}
else if(_loadState == LoadState.NotFound)
{
    <GetStarted UserId="@_userId" ReloadAddress="/Portfolio/"></GetStarted>
}
else if (_portfolio is not null)
{
    <h3>AssetsView</h3>
    <table class="table table-striped">
        <tbody>
            <tr>
                <td><strong>Balance:</strong> $@_portfolio.Balance</td>

                @if (_portfolio.Balance != 0 && _timeUntilBalanceCheck != TimeSpan.Zero)
                {
                    <td><strong> Time Until Balance Check: </strong> @_timeUntilBalanceCheck.ToString("mm':'ss")</td>
                }

                @if (_portfolio.Assets.Any())
                {
                    <td><strong>Time Until Coin Price Updated:</strong> @_timeUntilCoinPriceCheck.ToString("mm':'ss")</td>
                }

            </tr>
        </tbody>
    </table>
    <br />

    <AssetsView Portfolio="@_portfolio"></AssetsView>
    <br/>
    <BuyAsset Portfolio="@_portfolio"></BuyAsset>
}


@code {

    private LoadState _loadState = LoadState.NotLoaded;
    private string? _userId;
    private PortfolioDTO? _portfolio = null!;

    private TimeSpan _timeUntilBalanceCheck = new();
    private TimeSpan _timeUntilCoinPriceCheck = new();
    private Timer? timer;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; } = null!;

    protected override void OnParametersSet()
    {
        UpdateDisplayTime();
    }

    protected override async Task OnInitializedAsync()
    {
        var authState =  await authenticationState;
        _userId = authState.User.Claims.First(x => x.Type == ClaimTypes.SerialNumber).Value;

        _portfolio = await GetActivePortfolio(_userId);

        _loadState = _portfolio is null ? LoadState.NotFound : LoadState.FoundPortfolio;

        timer = new Timer(TimerCallback, null, TimeSpan.Zero, TimeSpan.FromSeconds(1));
    }

    private async Task<PortfolioDTO?> GetActivePortfolio(string? userId)
    {
        if (string.IsNullOrWhiteSpace(userId))
            return null;

        var person = await _gotchiHostService.DataAccess().PersonByIdAsync(_userId);

        if (person is null || string.IsNullOrWhiteSpace(person.ActivePortfolio))
            return null;

        return await _gotchiHostService.DataAccess().PortfolioByIdAsync(person.ActivePortfolio);
    }

    private void UpdateDisplayTime()
    {
        if (_portfolio is null)
            return;

        _timeUntilBalanceCheck = TimeUntilUpdate(_portfolio.BalanceNextUpdated);

        if (_portfolio.Assets.Any())
        {
            var asset = _portfolio.Assets.First();
            _timeUntilCoinPriceCheck = TimeUntilUpdate(asset.CoinPriceNextUpdated);
        }
    }

    private TimeSpan TimeUntilUpdate(DateTime timeOfNextUpdate)
    {
        return timeOfNextUpdate - DateTime.UtcNow;
    }

    private async void CheckToUpdatePortfolio()
    {
        if (_userId is null || _portfolio is null)
            return;

        var nowTime = DateTime.UtcNow.AddSeconds(1);
        if (nowTime >= _portfolio.BalanceNextUpdated)
        {
            _portfolio = await GetActivePortfolio(_userId);
        }
        else if (_portfolio.Assets.Any())
        {
            var asset = _portfolio.Assets.First();
            if (nowTime >= asset.CoinPriceNextUpdated)
            {
                _portfolio = await GetActivePortfolio(_userId);
            }
        } 
    }

    private void TimerCallback(object? state)
    {
        InvokeAsync(() =>
            {
                CheckToUpdatePortfolio();
                UpdateDisplayTime();
                StateHasChanged();
            });
    }

    public void Dispose()
    {
        timer?.Dispose();
    }


    private enum LoadState
    {
        NotLoaded,
        NotFound,
        FoundPortfolio
    }
}
