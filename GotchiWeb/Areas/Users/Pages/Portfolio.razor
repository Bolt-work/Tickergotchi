@page "/Portfolio/"

@using Gotchi
@using Gotchi.Portfolios.CommandService
@using Gotchi.Portfolios.DTOs
@using System.ComponentModel.DataAnnotations
@using System.Security.Claims

@using GotchiWeb.Areas.Users.Shared

@inject IJSRuntime js
@inject GotchiHostService _gotchiHostService

<h3>Portfolio</h3>

@if (_loadState == LoadState.NotLoaded)
{
    <p><em>Loading...</em></p>
}
else if(_loadState == LoadState.NotFound)
{
    <GetStarted UserId="@_userId" ReloadAddress="/Portfolio/"></GetStarted>
}
else if (_portfolio is not null)
{
    <h3>AssetsView</h3>
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Balance</th>
                <th>Assets Count</th>
                <th>BalanceLastUpdated</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@_portfolio.Balance</td>
                <td>@_portfolio.Assets.Count</td>
                <td>@_portfolio.BalanceLastUpdated</td>
            </tr>
        </tbody>
    </table>
    <br />

    <AssetsView Portfolio="@_portfolio"></AssetsView>
    <br/>
    <BuyAsset Portfolio="@_portfolio"></BuyAsset>
}


@code {

    private LoadState _loadState = LoadState.NotLoaded;
    private string? _userId;
    private PortfolioDTO? _portfolio = null!;

    private BuyAssetUiModel buyAssetModel = new();
    private SellAssetUiModel sellAssetModel = new();

    [CascadingParameter]
    private Task<AuthenticationState> authenticationState { get; set; }


    protected override async Task OnInitializedAsync()
    {
        var authState =  await authenticationState;
        _userId = authState.User.Claims.First(x => x.Type == ClaimTypes.SerialNumber).Value;
        _portfolio = await _gotchiHostService.DataAccess().PortfolioByPersonIdAsync(_userId);

        if (_portfolio is null)
        {
            _loadState = LoadState.NotFound;
        } 
        else
        {
            _loadState = LoadState.FoundPortfolio;    
        }

        //StateHasChanged();
    }

    private async Task<PortfolioDTO?> GetPortfolio(string userId)
    {
        return await _gotchiHostService.DataAccess().PortfolioByPersonIdAsync(_userId);
    }


    private enum LoadState
    {
        NotLoaded,
        NotFound,
        FoundPortfolio
    }

    private class BuyAssetUiModel
    {
        [Required(ErrorMessage = "CoinMarket Id required")]
        public string? CoinMarketId { get; set; }

        [Required(ErrorMessage = "CoinMarket Id required")]
        [Range(1, int.MaxValue, ErrorMessage = "Value should be greater than or equal to 1")]
        public float AmountInValue { get; set; }
    }

    private class SellAssetUiModel
    {
        [Required(ErrorMessage = "CoinMarket Id is required")]
        public string? CoinMarketId { get; set; }

        [Required(ErrorMessage = "Number of units is required")]
        public float Units { get; set; }
    }

    private void ShowPopup()
    {
        // Call the JavaScript function to show the popup
        js.InvokeVoidAsync("showPopup");
    }

    /*
     
    private Timer timer;

    protected override void OnInitialized()
        {
        // Start the timer when the component is initialized
        timer = new Timer(TimerCallback, null, TimeSpan.Zero, TimeSpan.FromSeconds(60));
    }

    private void TimerCallback(object state)
        {
        // Code to be executed every 60 seconds
        // For example, you can update data or perform some periodic task

        // Ensure UI updates are performed on the UI thread
        InvokeAsync(() =>
            {
            // Toggle the value to show/hide the element
            shouldShowElement = !shouldShowElement;

            // Notify Blazor that the state has changed
            StateHasChanged();
    });
    }

    private void ShowElement()
        {
        // Toggle the value to show/hide the element immediately
        shouldShowElement = !shouldShowElement;
    }

    // Don't forget to stop the timer when the component is disposed
    public void Dispose()
        {
        timer?.Dispose();
    }
    */
}
