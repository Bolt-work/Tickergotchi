@page "/CoinManager"

@using BlazorUI.Models;
@using BlazorUI.Shared.Gotchi;

@using Gotchi.CryptoCoins.CommandServices;
@using Gotchi.CryptoCoins.DTOs;

@inject GotchiHostService _gotchiHostService

<h3>CoinManager</h3>
<br>

<h4>Update Crypto Coin Database</h4>
<button type="button" @onclick="UpdateCoinDb">Click</button>

<br>
<br>
<h4>Find Coin Details</h4>
<EditForm Model="@getCoinDetails" OnValidSubmit="@GetCoinDetails">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="col-12 row">
        <label class="col-2 font-weight-bold">Coin Market Id:</label>
        <InputText id="coinId" @bind-Value="getCoinDetails.CoinMarketId" />
    </div>
    <div class="col-12 row">
        <label class="col-2 font-weight-bold">Name:</label>
        <InputText id="coinId" @bind-Value="getCoinDetails.Name" />
    </div>
    <div class="col-12 row">
        <label class="col-2 font-weight-bold">Slug:</label>
        <InputText id="coinId" @bind-Value="getCoinDetails.Slug" />
    </div>
    <div class="col-12 row">
        <label class="col-2 font-weight-bold">Symbol:</label>
        <InputText id="coinId" @bind-Value="getCoinDetails.Symbol" />
    </div>
    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

@if (displayCoinSingle is not null)
{
    <CryptoCoinDetails CryptoCoin="displayCoinSingle"></CryptoCoinDetails>
}
else
{
    @foreach (var coin in displayCoinList)
    {
        <CryptoCoinDetails CryptoCoin="coin"></CryptoCoinDetails>
    }
}

@code {
    private GetCoinDetailsUiModel getCoinDetails = new();
    private CryptoCoinDTO displayCoinSingle = null!;
    private ICollection<CryptoCoinDTO> displayCoinList = new List<CryptoCoinDTO>();

    private void GetCoinDetails()
    {
        displayCoinSingle = null!;
        displayCoinList = new List<CryptoCoinDTO>();

        if (getCoinDetails.CoinMarketId != null)
        {
            displayCoinSingle = _gotchiHostService.DataAccess().CryptoCoinByCoinMarketId(getCoinDetails.CoinMarketId);
        }
        else if (getCoinDetails.Name != null)
        {
            displayCoinSingle = _gotchiHostService.DataAccess().CryptoCoinByName(getCoinDetails.Name);
        }
        else if (getCoinDetails.Slug != null)
        {
            displayCoinList = _gotchiHostService.DataAccess().CryptoCoinBySlug(getCoinDetails.Slug);
        }
        else if (getCoinDetails.Symbol != null)
        {
            displayCoinList = _gotchiHostService.DataAccess().CryptoCoinBySymbol(getCoinDetails.Symbol);
        }

        getCoinDetails = new GetCoinDetailsUiModel();
    }

    private void UpdateCoinDb()
    {
        var command = new UpdateCryptoCoinRepositoryCommand();
        _gotchiHostService.CommandService().Process(command);
    }

    /*
     *        CryptoCoin GetByCoinMarketId(string coinMarketId);
        CryptoCoin GetByName(string name);
        IEnumerable<CryptoCoin> GetBySlug(string slug);
        IEnumerable<CryptoCoin> GetBySymbol(string symbol);
    */
}
