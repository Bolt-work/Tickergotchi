@page "/PersonManager"

@using BlazorUI.Models
@using Gotchi
@using Gotchi.Persons.CommandServices
@using Gotchi.Persons.DTOs;

@inject GotchiHostService _gotchiHostService

<h3>PersonManager</h3>

<h4>Create Person</h4>
<EditForm Model="@newPerson" OnValidSubmit="@CreatePerson">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <InputText id="personId" @bind-Value="newPerson.PersonId" />
    <InputText id="firstName" @bind-Value="newPerson.FirstName" />
    <InputText id="lastName" @bind-Value="newPerson.LastName" />

    <button type="submit" class="btn btn-primary">Submit</button>
</EditForm>

<h4>Current People</h4>
@if (people is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <table class="table table-striped">
        <thead>
            <tr>
                <th>Id</th>
                <th>First Name</th>
                <th>Last Name</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var person in people)
            {
                <tr>
                    <td>@person.Id</td>
                    <td>@person.FirstName</td>
                    <td>@person.LastName</td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private ICollection<PersonDTO> people;
    private CreatePersonUiModel newPerson = new CreatePersonUiModel();

    protected override async Task OnInitializedAsync()
    {
        people =  _gotchiHostService.DataAccess().PersonsAll();
    }

    private async Task CreatePerson()
    {
        var command = new CreatePersonCommand(newPerson.PersonId, newPerson.FirstName, newPerson.LastName);
        _gotchiHostService.CommandService().Process(command);

        newPerson = new CreatePersonUiModel();
        people = _gotchiHostService.DataAccess().PersonsAll();
    }

}
